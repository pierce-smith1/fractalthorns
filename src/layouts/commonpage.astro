---
    import Images from "../stores/image";
    import * as ImageTransformers from "../transformers/image";
    import * as ImageHelpers from "../helpers/image";

    import Default from "./default.astro";
    import Background from "../components/client/background.svelte";
    import Page from "../components/client/page.svelte";

    export interface Props {
        domain: string | undefined, 
        path: string | undefined,
    }

    const {domain, path} = Astro.params;

    const url = `${domain}/${path ?? ""}`;
    const embed = (() => {
        if (domain === "image" && path) {
            const name = path;
            const image = Images.get().find(image => image.name === name);
            const image_object = image && ImageTransformers.to_api_object(image);

            return {
                url, 
                image_url: image_object?.image_url ?? "", 
                descr: `${image?.title ?? "unknown"} Â· ${ImageHelpers.get_date_string(image?.date ?? new Date())}`
            };
        }
    })();
---

<Default embed_url={embed?.url} embed_image_url={embed?.image_url} embed_descr={embed?.descr}>
	<div class="page-body" data-domain={domain ?? "home"} data-path={path}>
        <Background client:only="svelte" />
        <Page client:only="svelte" />
    </div>
</Default>

<style>
    :global(*) {
        font-family: "lekton";
    }
</style>

<script>
    import * as Domain from "../helpers/domain.ts";
    import * as Nav from "../components/client/nav";

    import {current} from "../components/client/page.ts";

    const body = document.querySelector(".page-body");

    // @ts-ignore
    const domain = body?.dataset["domain"];
    // @ts-ignore
    const path = body?.dataset["path"];

    const page = Domain.path_to_page(`${domain}/${path ?? ""}`);
    current.set(page);
    Nav.set_domain_items(domain);
</script>